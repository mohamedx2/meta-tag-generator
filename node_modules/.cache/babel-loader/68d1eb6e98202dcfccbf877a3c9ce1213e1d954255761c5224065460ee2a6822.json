{"ast":null,"code":"export class LocalMetaGenerator {\n  static generateMetaTags(content) {\n    var _content$match;\n    const words = content.toLowerCase().split(/\\s+/);\n    const commonWords = new Set(['a', 'an', 'the', 'in', 'on', 'at', 'to', 'for', 'of', 'with', 'by']);\n\n    // Extract keywords\n    const keywords = words.filter(word => word.length > 3 && !commonWords.has(word)).slice(0, 5);\n\n    // Generate title from first heading or first sentence\n    const title = ((_content$match = content.match(/<h[1-6][^>]*>(.*?)<\\/h[1-6]>/i)) === null || _content$match === void 0 ? void 0 : _content$match[1]) || content.split('.')[0].slice(0, 60);\n\n    // Generate description from first paragraph or content start\n    const description = content.replace(/<[^>]+>/g, ' ').split('.')[0].trim().slice(0, 160);\n    return {\n      title,\n      description,\n      keywords\n    };\n  }\n}","map":{"version":3,"names":["LocalMetaGenerator","generateMetaTags","content","_content$match","words","toLowerCase","split","commonWords","Set","keywords","filter","word","length","has","slice","title","match","description","replace","trim"],"sources":["C:/Users/hamro/Documents/work/meta/src/utils/LocalMetaGenerator.ts"],"sourcesContent":["export class LocalMetaGenerator {\r\n  static generateMetaTags(content: string) {\r\n    const words = content.toLowerCase().split(/\\s+/);\r\n    const commonWords = new Set(['a', 'an', 'the', 'in', 'on', 'at', 'to', 'for', 'of', 'with', 'by']);\r\n    \r\n    // Extract keywords\r\n    const keywords = words\r\n      .filter(word => word.length > 3 && !commonWords.has(word))\r\n      .slice(0, 5);\r\n\r\n    // Generate title from first heading or first sentence\r\n    const title = content.match(/<h[1-6][^>]*>(.*?)<\\/h[1-6]>/i)?.[1] \r\n      || content.split('.')[0].slice(0, 60);\r\n\r\n    // Generate description from first paragraph or content start\r\n    const description = content.replace(/<[^>]+>/g, ' ')\r\n      .split('.')[0]\r\n      .trim()\r\n      .slice(0, 160);\r\n\r\n    return {\r\n      title,\r\n      description,\r\n      keywords\r\n    };\r\n  }\r\n}\r\n"],"mappings":"AAAA,OAAO,MAAMA,kBAAkB,CAAC;EAC9B,OAAOC,gBAAgBA,CAACC,OAAe,EAAE;IAAA,IAAAC,cAAA;IACvC,MAAMC,KAAK,GAAGF,OAAO,CAACG,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,KAAK,CAAC;IAChD,MAAMC,WAAW,GAAG,IAAIC,GAAG,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;;IAElG;IACA,MAAMC,QAAQ,GAAGL,KAAK,CACnBM,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,MAAM,GAAG,CAAC,IAAI,CAACL,WAAW,CAACM,GAAG,CAACF,IAAI,CAAC,CAAC,CACzDG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;;IAEd;IACA,MAAMC,KAAK,GAAG,EAAAZ,cAAA,GAAAD,OAAO,CAACc,KAAK,CAAC,+BAA+B,CAAC,cAAAb,cAAA,uBAA9CA,cAAA,CAAiD,CAAC,CAAC,KAC5DD,OAAO,CAACI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACQ,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;;IAEvC;IACA,MAAMG,WAAW,GAAGf,OAAO,CAACgB,OAAO,CAAC,UAAU,EAAE,GAAG,CAAC,CACjDZ,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CACba,IAAI,CAAC,CAAC,CACNL,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC;IAEhB,OAAO;MACLC,KAAK;MACLE,WAAW;MACXR;IACF,CAAC;EACH;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}