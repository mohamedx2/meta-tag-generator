{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from 'react';\nimport { MetaTagGenerator } from '../utils/MetaTagGenerator';\nexport const useMetaTags = config => {\n  _s();\n  const componentRef = useRef(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [generatedTags, setGeneratedTags] = useState(null);\n  useEffect(() => {\n    let mounted = true;\n    let tags = [];\n    const generateTags = async () => {\n      try {\n        setIsLoading(true);\n        setError(null);\n        if (config.useAI) {\n          config.elementRef = componentRef;\n        }\n        tags = await MetaTagGenerator.generate(config);\n        if (mounted) {\n          setGeneratedTags(tags.map(tag => ({\n            name: tag.getAttribute('name'),\n            content: tag.getAttribute('content')\n          })));\n        }\n      } catch (err) {\n        if (mounted) {\n          setError(err instanceof Error ? err.message : 'Failed to generate meta tags');\n          console.error('Meta tag generation error:', err);\n        }\n      } finally {\n        if (mounted) {\n          setIsLoading(false);\n        }\n      }\n    };\n    generateTags();\n    return () => {\n      mounted = false;\n      tags.forEach(tag => tag.remove());\n      if (config.canonical) {\n        const canonical = document.querySelector('link[rel=\"canonical\"]');\n        canonical === null || canonical === void 0 ? void 0 : canonical.remove();\n      }\n    };\n  }, [config]); // Only re-run if config changes\n\n  return {\n    componentRef,\n    isLoading,\n    error,\n    generatedTags\n  };\n};\n_s(useMetaTags, \"MI5whiWQFfCQo7RpuqNa09RLah4=\");","map":{"version":3,"names":["useEffect","useRef","useState","MetaTagGenerator","useMetaTags","config","_s","componentRef","isLoading","setIsLoading","error","setError","generatedTags","setGeneratedTags","mounted","tags","generateTags","useAI","elementRef","generate","map","tag","name","getAttribute","content","err","Error","message","console","forEach","remove","canonical","document","querySelector"],"sources":["C:/Users/hamro/Documents/work/meta/src/hooks/useMetaTags.ts"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\r\nimport { MetaConfig, MetaTagGenerator } from '../utils/MetaTagGenerator';\r\n\r\nexport const useMetaTags = (config: MetaConfig) => {\r\n  const componentRef = useRef<HTMLDivElement>(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [generatedTags, setGeneratedTags] = useState<any>(null);\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    let tags: HTMLMetaElement[] = [];\r\n\r\n    const generateTags = async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        setError(null);\r\n        if (config.useAI) {\r\n          config.elementRef = componentRef;\r\n        }\r\n        tags = await MetaTagGenerator.generate(config);\r\n        \r\n        if (mounted) {\r\n          setGeneratedTags(tags.map(tag => ({\r\n            name: tag.getAttribute('name'),\r\n            content: tag.getAttribute('content')\r\n          })));\r\n        }\r\n      } catch (err) {\r\n        if (mounted) {\r\n          setError(err instanceof Error ? err.message : 'Failed to generate meta tags');\r\n          console.error('Meta tag generation error:', err);\r\n        }\r\n      } finally {\r\n        if (mounted) {\r\n          setIsLoading(false);\r\n        }\r\n      }\r\n    };\r\n\r\n    generateTags();\r\n\r\n    return () => {\r\n      mounted = false;\r\n      tags.forEach(tag => tag.remove());\r\n      if (config.canonical) {\r\n        const canonical = document.querySelector('link[rel=\"canonical\"]');\r\n        canonical?.remove();\r\n      }\r\n    };\r\n  }, [config]); // Only re-run if config changes\r\n\r\n  return { componentRef, isLoading, error, generatedTags };\r\n};\r\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACnD,SAAqBC,gBAAgB,QAAQ,2BAA2B;AAExE,OAAO,MAAMC,WAAW,GAAIC,MAAkB,IAAK;EAAAC,EAAA;EACjD,MAAMC,YAAY,GAAGN,MAAM,CAAiB,IAAI,CAAC;EACjD,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAgB,IAAI,CAAC;EACvD,MAAM,CAACU,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAM,IAAI,CAAC;EAE7DF,SAAS,CAAC,MAAM;IACd,IAAIc,OAAO,GAAG,IAAI;IAClB,IAAIC,IAAuB,GAAG,EAAE;IAEhC,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI;QACFP,YAAY,CAAC,IAAI,CAAC;QAClBE,QAAQ,CAAC,IAAI,CAAC;QACd,IAAIN,MAAM,CAACY,KAAK,EAAE;UAChBZ,MAAM,CAACa,UAAU,GAAGX,YAAY;QAClC;QACAQ,IAAI,GAAG,MAAMZ,gBAAgB,CAACgB,QAAQ,CAACd,MAAM,CAAC;QAE9C,IAAIS,OAAO,EAAE;UACXD,gBAAgB,CAACE,IAAI,CAACK,GAAG,CAACC,GAAG,KAAK;YAChCC,IAAI,EAAED,GAAG,CAACE,YAAY,CAAC,MAAM,CAAC;YAC9BC,OAAO,EAAEH,GAAG,CAACE,YAAY,CAAC,SAAS;UACrC,CAAC,CAAC,CAAC,CAAC;QACN;MACF,CAAC,CAAC,OAAOE,GAAG,EAAE;QACZ,IAAIX,OAAO,EAAE;UACXH,QAAQ,CAACc,GAAG,YAAYC,KAAK,GAAGD,GAAG,CAACE,OAAO,GAAG,8BAA8B,CAAC;UAC7EC,OAAO,CAAClB,KAAK,CAAC,4BAA4B,EAAEe,GAAG,CAAC;QAClD;MACF,CAAC,SAAS;QACR,IAAIX,OAAO,EAAE;UACXL,YAAY,CAAC,KAAK,CAAC;QACrB;MACF;IACF,CAAC;IAEDO,YAAY,CAAC,CAAC;IAEd,OAAO,MAAM;MACXF,OAAO,GAAG,KAAK;MACfC,IAAI,CAACc,OAAO,CAACR,GAAG,IAAIA,GAAG,CAACS,MAAM,CAAC,CAAC,CAAC;MACjC,IAAIzB,MAAM,CAAC0B,SAAS,EAAE;QACpB,MAAMA,SAAS,GAAGC,QAAQ,CAACC,aAAa,CAAC,uBAAuB,CAAC;QACjEF,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAED,MAAM,CAAC,CAAC;MACrB;IACF,CAAC;EACH,CAAC,EAAE,CAACzB,MAAM,CAAC,CAAC,CAAC,CAAC;;EAEd,OAAO;IAAEE,YAAY;IAAEC,SAAS;IAAEE,KAAK;IAAEE;EAAc,CAAC;AAC1D,CAAC;AAACN,EAAA,CAlDWF,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}