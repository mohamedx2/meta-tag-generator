{"ast":null,"code":"import OpenAI from 'openai';\nexport class MetaAIService {\n  static async generateMetaSuggestions(content) {\n    const completion = await this.openai.chat.completions.create({\n      messages: [{\n        role: \"system\",\n        content: \"Generate SEO meta tags based on the following content. Return JSON with title, description, and keywords.\"\n      }, {\n        role: \"user\",\n        content: content\n      }],\n      model: \"gpt-3.5-turbo\"\n    });\n    return JSON.parse(completion.choices[0].message.content || '{}');\n  }\n  static extractContentFromComponent(element) {\n    return element.innerText || element.textContent || '';\n  }\n}\nMetaAIService.openai = new OpenAI({\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY\n});","map":{"version":3,"names":["OpenAI","MetaAIService","generateMetaSuggestions","content","completion","openai","chat","completions","create","messages","role","model","JSON","parse","choices","message","extractContentFromComponent","element","innerText","textContent","apiKey","process","env","REACT_APP_OPENAI_API_KEY"],"sources":["C:/Users/hamro/Documents/work/meta/src/services/MetaAIService.ts"],"sourcesContent":["import OpenAI from 'openai';\r\n\r\nexport class MetaAIService {\r\n  private static openai = new OpenAI({\r\n    apiKey: process.env.REACT_APP_OPENAI_API_KEY,\r\n  });\r\n\r\n  static async generateMetaSuggestions(content: string) {\r\n    const completion = await this.openai.chat.completions.create({\r\n      messages: [{\r\n        role: \"system\",\r\n        content: \"Generate SEO meta tags based on the following content. Return JSON with title, description, and keywords.\"\r\n      }, {\r\n        role: \"user\",\r\n        content: content\r\n      }],\r\n      model: \"gpt-3.5-turbo\",\r\n    });\r\n\r\n    return JSON.parse(completion.choices[0].message.content || '{}');\r\n  }\r\n\r\n  static extractContentFromComponent(element: HTMLElement): string {\r\n    return element.innerText || element.textContent || '';\r\n  }\r\n}\r\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,QAAQ;AAE3B,OAAO,MAAMC,aAAa,CAAC;EAKzB,aAAaC,uBAAuBA,CAACC,OAAe,EAAE;IACpD,MAAMC,UAAU,GAAG,MAAM,IAAI,CAACC,MAAM,CAACC,IAAI,CAACC,WAAW,CAACC,MAAM,CAAC;MAC3DC,QAAQ,EAAE,CAAC;QACTC,IAAI,EAAE,QAAQ;QACdP,OAAO,EAAE;MACX,CAAC,EAAE;QACDO,IAAI,EAAE,MAAM;QACZP,OAAO,EAAEA;MACX,CAAC,CAAC;MACFQ,KAAK,EAAE;IACT,CAAC,CAAC;IAEF,OAAOC,IAAI,CAACC,KAAK,CAACT,UAAU,CAACU,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACZ,OAAO,IAAI,IAAI,CAAC;EAClE;EAEA,OAAOa,2BAA2BA,CAACC,OAAoB,EAAU;IAC/D,OAAOA,OAAO,CAACC,SAAS,IAAID,OAAO,CAACE,WAAW,IAAI,EAAE;EACvD;AACF;AAvBalB,aAAa,CACTI,MAAM,GAAG,IAAIL,MAAM,CAAC;EACjCoB,MAAM,EAAEC,OAAO,CAACC,GAAG,CAACC;AACtB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}