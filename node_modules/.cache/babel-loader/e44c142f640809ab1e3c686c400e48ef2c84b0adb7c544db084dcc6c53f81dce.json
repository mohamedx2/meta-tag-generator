{"ast":null,"code":"import { MetaAIService } from '../services/MetaAIService';\nexport class MetaTagGenerator {\n  static async generate(config) {\n    var _config$elementRef, _config$keywords;\n    const tags = [];\n    if (config.useAI && (_config$elementRef = config.elementRef) !== null && _config$elementRef !== void 0 && _config$elementRef.current) {\n      const content = MetaAIService.extractContentFromComponent(config.elementRef.current);\n      const aiSuggestions = await MetaAIService.generateMetaSuggestions(content);\n      config = {\n        ...config,\n        title: config.title || aiSuggestions.title,\n        description: config.description || aiSuggestions.description,\n        keywords: config.keywords || aiSuggestions.keywords\n      };\n    }\n    if (config.title) {\n      document.title = config.title;\n    }\n    if (config.description) {\n      this.createMetaTag(tags, 'description', config.description);\n      this.createMetaTag(tags, 'og:description', config.description);\n    }\n    if ((_config$keywords = config.keywords) !== null && _config$keywords !== void 0 && _config$keywords.length) {\n      this.createMetaTag(tags, 'keywords', config.keywords.join(', '));\n    }\n    if (config.ogImage) {\n      this.createMetaTag(tags, 'og:image', config.ogImage);\n    }\n    if (config.canonical) {\n      const link = document.createElement('link');\n      link.rel = 'canonical';\n      link.href = config.canonical;\n      document.head.appendChild(link);\n    }\n    if (config.robots) {\n      this.createMetaTag(tags, 'robots', config.robots);\n    }\n    return tags;\n  }\n  static createMetaTag(tags, name, content) {\n    const tag = document.createElement('meta');\n    tag.name = name;\n    tag.content = content;\n    tags.push(tag);\n    document.head.appendChild(tag);\n  }\n}","map":{"version":3,"names":["MetaAIService","MetaTagGenerator","generate","config","_config$elementRef","_config$keywords","tags","useAI","elementRef","current","content","extractContentFromComponent","aiSuggestions","generateMetaSuggestions","title","description","keywords","document","createMetaTag","length","join","ogImage","canonical","link","createElement","rel","href","head","appendChild","robots","name","tag","push"],"sources":["C:/Users/hamro/Documents/work/meta/src/utils/MetaTagGenerator.ts"],"sourcesContent":["import React from 'react';\r\nimport { MetaAIService } from '../services/MetaAIService';\r\n\r\nexport interface MetaConfig {\r\n  title?: string;\r\n  description?: string;\r\n  keywords?: string[];\r\n  ogImage?: string;\r\n  canonical?: string;\r\n  robots?: string;\r\n  useAI?: boolean;\r\n  elementRef?: React.RefObject<HTMLElement>;\r\n}\r\n\r\nexport class MetaTagGenerator {\r\n  static async generate(config: MetaConfig): Promise<HTMLMetaElement[]> {\r\n    const tags: HTMLMetaElement[] = [];\r\n\r\n    if (config.useAI && config.elementRef?.current) {\r\n      const content = MetaAIService.extractContentFromComponent(config.elementRef.current);\r\n      const aiSuggestions = await MetaAIService.generateMetaSuggestions(content);\r\n      \r\n      config = {\r\n        ...config,\r\n        title: config.title || aiSuggestions.title,\r\n        description: config.description || aiSuggestions.description,\r\n        keywords: config.keywords || aiSuggestions.keywords,\r\n      };\r\n    }\r\n\r\n    if (config.title) {\r\n      document.title = config.title;\r\n    }\r\n\r\n    if (config.description) {\r\n      this.createMetaTag(tags, 'description', config.description);\r\n      this.createMetaTag(tags, 'og:description', config.description);\r\n    }\r\n\r\n    if (config.keywords?.length) {\r\n      this.createMetaTag(tags, 'keywords', config.keywords.join(', '));\r\n    }\r\n\r\n    if (config.ogImage) {\r\n      this.createMetaTag(tags, 'og:image', config.ogImage);\r\n    }\r\n\r\n    if (config.canonical) {\r\n      const link = document.createElement('link');\r\n      link.rel = 'canonical';\r\n      link.href = config.canonical;\r\n      document.head.appendChild(link);\r\n    }\r\n\r\n    if (config.robots) {\r\n      this.createMetaTag(tags, 'robots', config.robots);\r\n    }\r\n\r\n    return tags;\r\n  }\r\n\r\n  private static createMetaTag(tags: HTMLMetaElement[], name: string, content: string) {\r\n    const tag = document.createElement('meta');\r\n    tag.name = name;\r\n    tag.content = content;\r\n    tags.push(tag);\r\n    document.head.appendChild(tag);\r\n  }\r\n}\r\n"],"mappings":"AACA,SAASA,aAAa,QAAQ,2BAA2B;AAazD,OAAO,MAAMC,gBAAgB,CAAC;EAC5B,aAAaC,QAAQA,CAACC,MAAkB,EAA8B;IAAA,IAAAC,kBAAA,EAAAC,gBAAA;IACpE,MAAMC,IAAuB,GAAG,EAAE;IAElC,IAAIH,MAAM,CAACI,KAAK,KAAAH,kBAAA,GAAID,MAAM,CAACK,UAAU,cAAAJ,kBAAA,eAAjBA,kBAAA,CAAmBK,OAAO,EAAE;MAC9C,MAAMC,OAAO,GAAGV,aAAa,CAACW,2BAA2B,CAACR,MAAM,CAACK,UAAU,CAACC,OAAO,CAAC;MACpF,MAAMG,aAAa,GAAG,MAAMZ,aAAa,CAACa,uBAAuB,CAACH,OAAO,CAAC;MAE1EP,MAAM,GAAG;QACP,GAAGA,MAAM;QACTW,KAAK,EAAEX,MAAM,CAACW,KAAK,IAAIF,aAAa,CAACE,KAAK;QAC1CC,WAAW,EAAEZ,MAAM,CAACY,WAAW,IAAIH,aAAa,CAACG,WAAW;QAC5DC,QAAQ,EAAEb,MAAM,CAACa,QAAQ,IAAIJ,aAAa,CAACI;MAC7C,CAAC;IACH;IAEA,IAAIb,MAAM,CAACW,KAAK,EAAE;MAChBG,QAAQ,CAACH,KAAK,GAAGX,MAAM,CAACW,KAAK;IAC/B;IAEA,IAAIX,MAAM,CAACY,WAAW,EAAE;MACtB,IAAI,CAACG,aAAa,CAACZ,IAAI,EAAE,aAAa,EAAEH,MAAM,CAACY,WAAW,CAAC;MAC3D,IAAI,CAACG,aAAa,CAACZ,IAAI,EAAE,gBAAgB,EAAEH,MAAM,CAACY,WAAW,CAAC;IAChE;IAEA,KAAAV,gBAAA,GAAIF,MAAM,CAACa,QAAQ,cAAAX,gBAAA,eAAfA,gBAAA,CAAiBc,MAAM,EAAE;MAC3B,IAAI,CAACD,aAAa,CAACZ,IAAI,EAAE,UAAU,EAAEH,MAAM,CAACa,QAAQ,CAACI,IAAI,CAAC,IAAI,CAAC,CAAC;IAClE;IAEA,IAAIjB,MAAM,CAACkB,OAAO,EAAE;MAClB,IAAI,CAACH,aAAa,CAACZ,IAAI,EAAE,UAAU,EAAEH,MAAM,CAACkB,OAAO,CAAC;IACtD;IAEA,IAAIlB,MAAM,CAACmB,SAAS,EAAE;MACpB,MAAMC,IAAI,GAAGN,QAAQ,CAACO,aAAa,CAAC,MAAM,CAAC;MAC3CD,IAAI,CAACE,GAAG,GAAG,WAAW;MACtBF,IAAI,CAACG,IAAI,GAAGvB,MAAM,CAACmB,SAAS;MAC5BL,QAAQ,CAACU,IAAI,CAACC,WAAW,CAACL,IAAI,CAAC;IACjC;IAEA,IAAIpB,MAAM,CAAC0B,MAAM,EAAE;MACjB,IAAI,CAACX,aAAa,CAACZ,IAAI,EAAE,QAAQ,EAAEH,MAAM,CAAC0B,MAAM,CAAC;IACnD;IAEA,OAAOvB,IAAI;EACb;EAEA,OAAeY,aAAaA,CAACZ,IAAuB,EAAEwB,IAAY,EAAEpB,OAAe,EAAE;IACnF,MAAMqB,GAAG,GAAGd,QAAQ,CAACO,aAAa,CAAC,MAAM,CAAC;IAC1CO,GAAG,CAACD,IAAI,GAAGA,IAAI;IACfC,GAAG,CAACrB,OAAO,GAAGA,OAAO;IACrBJ,IAAI,CAAC0B,IAAI,CAACD,GAAG,CAAC;IACdd,QAAQ,CAACU,IAAI,CAACC,WAAW,CAACG,GAAG,CAAC;EAChC;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}