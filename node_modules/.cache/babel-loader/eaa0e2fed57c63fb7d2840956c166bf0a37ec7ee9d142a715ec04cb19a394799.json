{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from 'react';\nimport { MetaTagGenerator } from '../utils/MetaTagGenerator';\nexport const useMetaTags = config => {\n  _s();\n  const componentRef = useRef(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    let tags = [];\n    const generateTags = async () => {\n      try {\n        setIsLoading(true);\n        setError(null);\n        if (config.useAI) {\n          config.elementRef = componentRef;\n        }\n        tags = await MetaTagGenerator.generate(config);\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Failed to generate meta tags');\n        console.error('Meta tag generation error:', err);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    generateTags();\n    return () => {\n      // Cleanup tags when component unmounts\n      tags.forEach(tag => tag.remove());\n      if (config.canonical) {\n        const canonical = document.querySelector('link[rel=\"canonical\"]');\n        canonical === null || canonical === void 0 ? void 0 : canonical.remove();\n      }\n    };\n  }, [config]);\n  return {\n    componentRef,\n    isLoading,\n    error\n  };\n};\n_s(useMetaTags, \"Q3f220MM75Og+bk+MS2VwCaWWdw=\");","map":{"version":3,"names":["useEffect","useRef","useState","MetaTagGenerator","useMetaTags","config","_s","componentRef","isLoading","setIsLoading","error","setError","tags","generateTags","useAI","elementRef","generate","err","Error","message","console","forEach","tag","remove","canonical","document","querySelector"],"sources":["C:/Users/hamro/Documents/work/meta/src/hooks/useMetaTags.ts"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\r\nimport { MetaConfig, MetaTagGenerator } from '../utils/MetaTagGenerator';\r\n\r\nexport const useMetaTags = (config: MetaConfig) => {\r\n  const componentRef = useRef<HTMLDivElement>(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    let tags: HTMLMetaElement[] = [];\r\n\r\n    const generateTags = async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        setError(null);\r\n        if (config.useAI) {\r\n          config.elementRef = componentRef;\r\n        }\r\n        tags = await MetaTagGenerator.generate(config);\r\n      } catch (err) {\r\n        setError(err instanceof Error ? err.message : 'Failed to generate meta tags');\r\n        console.error('Meta tag generation error:', err);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    generateTags();\r\n\r\n    return () => {\r\n      // Cleanup tags when component unmounts\r\n      tags.forEach(tag => tag.remove());\r\n      if (config.canonical) {\r\n        const canonical = document.querySelector('link[rel=\"canonical\"]');\r\n        canonical?.remove();\r\n      }\r\n    };\r\n  }, [config]);\r\n\r\n  return { componentRef, isLoading, error };\r\n};\r\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACnD,SAAqBC,gBAAgB,QAAQ,2BAA2B;AAExE,OAAO,MAAMC,WAAW,GAAIC,MAAkB,IAAK;EAAAC,EAAA;EACjD,MAAMC,YAAY,GAAGN,MAAM,CAAiB,IAAI,CAAC;EACjD,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAgB,IAAI,CAAC;EAEvDF,SAAS,CAAC,MAAM;IACd,IAAIY,IAAuB,GAAG,EAAE;IAEhC,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI;QACFJ,YAAY,CAAC,IAAI,CAAC;QAClBE,QAAQ,CAAC,IAAI,CAAC;QACd,IAAIN,MAAM,CAACS,KAAK,EAAE;UAChBT,MAAM,CAACU,UAAU,GAAGR,YAAY;QAClC;QACAK,IAAI,GAAG,MAAMT,gBAAgB,CAACa,QAAQ,CAACX,MAAM,CAAC;MAChD,CAAC,CAAC,OAAOY,GAAG,EAAE;QACZN,QAAQ,CAACM,GAAG,YAAYC,KAAK,GAAGD,GAAG,CAACE,OAAO,GAAG,8BAA8B,CAAC;QAC7EC,OAAO,CAACV,KAAK,CAAC,4BAA4B,EAAEO,GAAG,CAAC;MAClD,CAAC,SAAS;QACRR,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAEDI,YAAY,CAAC,CAAC;IAEd,OAAO,MAAM;MACX;MACAD,IAAI,CAACS,OAAO,CAACC,GAAG,IAAIA,GAAG,CAACC,MAAM,CAAC,CAAC,CAAC;MACjC,IAAIlB,MAAM,CAACmB,SAAS,EAAE;QACpB,MAAMA,SAAS,GAAGC,QAAQ,CAACC,aAAa,CAAC,uBAAuB,CAAC;QACjEF,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAED,MAAM,CAAC,CAAC;MACrB;IACF,CAAC;EACH,CAAC,EAAE,CAAClB,MAAM,CAAC,CAAC;EAEZ,OAAO;IAAEE,YAAY;IAAEC,SAAS;IAAEE;EAAM,CAAC;AAC3C,CAAC;AAACJ,EAAA,CArCWF,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}