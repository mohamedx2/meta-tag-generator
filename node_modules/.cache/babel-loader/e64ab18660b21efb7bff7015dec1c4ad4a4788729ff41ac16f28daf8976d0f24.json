{"ast":null,"code":"export class LocalMetaGenerator {\n  static generateMetaTags(content) {\n    // Clean content\n    const cleanContent = content.replace(/<[^>]+>/g, ' ').trim();\n\n    // Get title\n    const title = this.generateTitle(cleanContent);\n\n    // Get description\n    const description = this.generateDescription(cleanContent);\n\n    // Get keywords\n    const keywords = this.extractKeywords(cleanContent);\n    return {\n      title,\n      description,\n      keywords\n    };\n  }\n  static generateTitle(content) {\n    const firstSentence = content.split(/[.!?]/)[0];\n    return firstSentence.length > 60 ? `${firstSentence.slice(0, 57)}...` : firstSentence;\n  }\n  static generateDescription(content) {\n    const words = content.split(/\\s+/);\n    const description = words.slice(0, 30).join(' ');\n    return description.length > 160 ? `${description.slice(0, 157)}...` : description;\n  }\n  static extractKeywords(content) {\n    const words = content.toLowerCase().split(/\\s+/).filter(word => word.length > 3 && !this.stopWords.has(word) && /^[a-z]+$/.test(word));\n    const wordFrequency = new Map();\n    words.forEach(word => {\n      wordFrequency.set(word, (wordFrequency.get(word) || 0) + 1);\n    });\n    return Array.from(wordFrequency.entries()).sort((a, b) => b[1] - a[1]).slice(0, 5).map(([word]) => word);\n  }\n}\nLocalMetaGenerator.stopWords = new Set(['a', 'an', 'the', 'in', 'on', 'at', 'to', 'for', 'of', 'with', 'by', 'and', 'or', 'but', 'is', 'are', 'was', 'were', 'this', 'that']);","map":{"version":3,"names":["LocalMetaGenerator","generateMetaTags","content","cleanContent","replace","trim","title","generateTitle","description","generateDescription","keywords","extractKeywords","firstSentence","split","length","slice","words","join","toLowerCase","filter","word","stopWords","has","test","wordFrequency","Map","forEach","set","get","Array","from","entries","sort","a","b","map","Set"],"sources":["C:/Users/hamro/Documents/work/meta/src/utils/LocalMetaGenerator.ts"],"sourcesContent":["export class LocalMetaGenerator {\r\n  private static stopWords = new Set([\r\n    'a', 'an', 'the', 'in', 'on', 'at', 'to', 'for', 'of', 'with', 'by',\r\n    'and', 'or', 'but', 'is', 'are', 'was', 'were', 'this', 'that'\r\n  ]);\r\n\r\n  static generateMetaTags(content: string) {\r\n    // Clean content\r\n    const cleanContent = content.replace(/<[^>]+>/g, ' ').trim();\r\n    \r\n    // Get title\r\n    const title = this.generateTitle(cleanContent);\r\n    \r\n    // Get description\r\n    const description = this.generateDescription(cleanContent);\r\n    \r\n    // Get keywords\r\n    const keywords = this.extractKeywords(cleanContent);\r\n\r\n    return { title, description, keywords };\r\n  }\r\n\r\n  private static generateTitle(content: string): string {\r\n    const firstSentence = content.split(/[.!?]/)[0];\r\n    return firstSentence.length > 60 \r\n      ? `${firstSentence.slice(0, 57)}...`\r\n      : firstSentence;\r\n  }\r\n\r\n  private static generateDescription(content: string): string {\r\n    const words = content.split(/\\s+/);\r\n    const description = words.slice(0, 30).join(' ');\r\n    return description.length > 160 \r\n      ? `${description.slice(0, 157)}...`\r\n      : description;\r\n  }\r\n\r\n  private static extractKeywords(content: string): string[] {\r\n    const words = content.toLowerCase()\r\n      .split(/\\s+/)\r\n      .filter(word => \r\n        word.length > 3 && \r\n        !this.stopWords.has(word) &&\r\n        /^[a-z]+$/.test(word)\r\n      );\r\n\r\n    const wordFrequency = new Map<string, number>();\r\n    words.forEach(word => {\r\n      wordFrequency.set(word, (wordFrequency.get(word) || 0) + 1);\r\n    });\r\n\r\n    return Array.from(wordFrequency.entries())\r\n      .sort((a, b) => b[1] - a[1])\r\n      .slice(0, 5)\r\n      .map(([word]) => word);\r\n  }\r\n}\r\n"],"mappings":"AAAA,OAAO,MAAMA,kBAAkB,CAAC;EAM9B,OAAOC,gBAAgBA,CAACC,OAAe,EAAE;IACvC;IACA,MAAMC,YAAY,GAAGD,OAAO,CAACE,OAAO,CAAC,UAAU,EAAE,GAAG,CAAC,CAACC,IAAI,CAAC,CAAC;;IAE5D;IACA,MAAMC,KAAK,GAAG,IAAI,CAACC,aAAa,CAACJ,YAAY,CAAC;;IAE9C;IACA,MAAMK,WAAW,GAAG,IAAI,CAACC,mBAAmB,CAACN,YAAY,CAAC;;IAE1D;IACA,MAAMO,QAAQ,GAAG,IAAI,CAACC,eAAe,CAACR,YAAY,CAAC;IAEnD,OAAO;MAAEG,KAAK;MAAEE,WAAW;MAAEE;IAAS,CAAC;EACzC;EAEA,OAAeH,aAAaA,CAACL,OAAe,EAAU;IACpD,MAAMU,aAAa,GAAGV,OAAO,CAACW,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC/C,OAAOD,aAAa,CAACE,MAAM,GAAG,EAAE,GAC5B,GAAGF,aAAa,CAACG,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,GAClCH,aAAa;EACnB;EAEA,OAAeH,mBAAmBA,CAACP,OAAe,EAAU;IAC1D,MAAMc,KAAK,GAAGd,OAAO,CAACW,KAAK,CAAC,KAAK,CAAC;IAClC,MAAML,WAAW,GAAGQ,KAAK,CAACD,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAACE,IAAI,CAAC,GAAG,CAAC;IAChD,OAAOT,WAAW,CAACM,MAAM,GAAG,GAAG,GAC3B,GAAGN,WAAW,CAACO,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,KAAK,GACjCP,WAAW;EACjB;EAEA,OAAeG,eAAeA,CAACT,OAAe,EAAY;IACxD,MAAMc,KAAK,GAAGd,OAAO,CAACgB,WAAW,CAAC,CAAC,CAChCL,KAAK,CAAC,KAAK,CAAC,CACZM,MAAM,CAACC,IAAI,IACVA,IAAI,CAACN,MAAM,GAAG,CAAC,IACf,CAAC,IAAI,CAACO,SAAS,CAACC,GAAG,CAACF,IAAI,CAAC,IACzB,UAAU,CAACG,IAAI,CAACH,IAAI,CACtB,CAAC;IAEH,MAAMI,aAAa,GAAG,IAAIC,GAAG,CAAiB,CAAC;IAC/CT,KAAK,CAACU,OAAO,CAACN,IAAI,IAAI;MACpBI,aAAa,CAACG,GAAG,CAACP,IAAI,EAAE,CAACI,aAAa,CAACI,GAAG,CAACR,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC7D,CAAC,CAAC;IAEF,OAAOS,KAAK,CAACC,IAAI,CAACN,aAAa,CAACO,OAAO,CAAC,CAAC,CAAC,CACvCC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAAC,CAAC,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC,CAAC,CAC3BlB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CACXoB,GAAG,CAAC,CAAC,CAACf,IAAI,CAAC,KAAKA,IAAI,CAAC;EAC1B;AACF;AAxDapB,kBAAkB,CACdqB,SAAS,GAAG,IAAIe,GAAG,CAAC,CACjC,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EACnE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAC/D,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}