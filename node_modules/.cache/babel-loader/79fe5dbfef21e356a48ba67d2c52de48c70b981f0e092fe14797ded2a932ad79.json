{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef, useState, useCallback } from 'react';\nimport { MetaTagGenerator } from '../utils/MetaTagGenerator';\nexport const useMetaTags = config => {\n  _s();\n  const componentRef = useRef(null);\n  const [state, setState] = useState({\n    isLoading: false,\n    error: null,\n    generatedTags: null\n  });\n  const generateTags = useCallback(async () => {\n    if (!componentRef.current) return;\n    setState(prev => ({\n      ...prev,\n      isLoading: true,\n      error: null\n    }));\n    try {\n      const newConfig = {\n        ...config,\n        elementRef: componentRef\n      };\n      const tags = await MetaTagGenerator.generate(newConfig);\n      const tagData = tags.map(tag => ({\n        name: tag.getAttribute('name'),\n        content: tag.getAttribute('content')\n      }));\n      setState(prev => ({\n        ...prev,\n        isLoading: false,\n        generatedTags: tagData\n      }));\n      return tags;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to generate meta tags';\n      setState(prev => ({\n        ...prev,\n        isLoading: false,\n        error: errorMessage\n      }));\n      console.error('Meta tag generation error:', err);\n      return [];\n    }\n  }, [config]);\n  useEffect(() => {\n    let tags = [];\n    generateTags().then(newTags => {\n      tags = newTags;\n    });\n    return () => {\n      tags.forEach(tag => tag.remove());\n      const canonical = document.querySelector('link[rel=\"canonical\"]');\n      canonical === null || canonical === void 0 ? void 0 : canonical.remove();\n    };\n  }, [generateTags]);\n  return {\n    componentRef,\n    ...state\n  };\n};\n_s(useMetaTags, \"yPnJ/WNWR7im8LUNZYDYPbNoCe4=\");","map":{"version":3,"names":["useEffect","useRef","useState","useCallback","MetaTagGenerator","useMetaTags","config","_s","componentRef","state","setState","isLoading","error","generatedTags","generateTags","current","prev","newConfig","elementRef","tags","generate","tagData","map","tag","name","getAttribute","content","err","errorMessage","Error","message","console","then","newTags","forEach","remove","canonical","document","querySelector"],"sources":["C:/Users/hamro/Documents/work/meta/src/hooks/useMetaTags.ts"],"sourcesContent":["import { useEffect, useRef, useState, useCallback } from 'react';\r\nimport { MetaConfig, MetaTagGenerator } from '../utils/MetaTagGenerator';\r\n\r\nexport const useMetaTags = (config: MetaConfig) => {\r\n  const componentRef = useRef<HTMLDivElement>(null);\r\n  const [state, setState] = useState({\r\n    isLoading: false,\r\n    error: null as string | null,\r\n    generatedTags: null as any\r\n  });\r\n\r\n  const generateTags = useCallback(async () => {\r\n    if (!componentRef.current) return;\r\n\r\n    setState(prev => ({ ...prev, isLoading: true, error: null }));\r\n    try {\r\n      const newConfig = {\r\n        ...config,\r\n        elementRef: componentRef\r\n      };\r\n      \r\n      const tags = await MetaTagGenerator.generate(newConfig);\r\n      const tagData = tags.map(tag => ({\r\n        name: tag.getAttribute('name'),\r\n        content: tag.getAttribute('content')\r\n      }));\r\n\r\n      setState(prev => ({\r\n        ...prev,\r\n        isLoading: false,\r\n        generatedTags: tagData\r\n      }));\r\n\r\n      return tags;\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to generate meta tags';\r\n      setState(prev => ({\r\n        ...prev,\r\n        isLoading: false,\r\n        error: errorMessage\r\n      }));\r\n      console.error('Meta tag generation error:', err);\r\n      return [];\r\n    }\r\n  }, [config]);\r\n\r\n  useEffect(() => {\r\n    let tags: HTMLMetaElement[] = [];\r\n    \r\n    generateTags().then(newTags => {\r\n      tags = newTags;\r\n    });\r\n\r\n    return () => {\r\n      tags.forEach(tag => tag.remove());\r\n      const canonical = document.querySelector('link[rel=\"canonical\"]');\r\n      canonical?.remove();\r\n    };\r\n  }, [generateTags]);\r\n\r\n  return {\r\n    componentRef,\r\n    ...state\r\n  };\r\n};\r\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAChE,SAAqBC,gBAAgB,QAAQ,2BAA2B;AAExE,OAAO,MAAMC,WAAW,GAAIC,MAAkB,IAAK;EAAAC,EAAA;EACjD,MAAMC,YAAY,GAAGP,MAAM,CAAiB,IAAI,CAAC;EACjD,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC;IACjCS,SAAS,EAAE,KAAK;IAChBC,KAAK,EAAE,IAAqB;IAC5BC,aAAa,EAAE;EACjB,CAAC,CAAC;EAEF,MAAMC,YAAY,GAAGX,WAAW,CAAC,YAAY;IAC3C,IAAI,CAACK,YAAY,CAACO,OAAO,EAAE;IAE3BL,QAAQ,CAACM,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAEL,SAAS,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC,CAAC;IAC7D,IAAI;MACF,MAAMK,SAAS,GAAG;QAChB,GAAGX,MAAM;QACTY,UAAU,EAAEV;MACd,CAAC;MAED,MAAMW,IAAI,GAAG,MAAMf,gBAAgB,CAACgB,QAAQ,CAACH,SAAS,CAAC;MACvD,MAAMI,OAAO,GAAGF,IAAI,CAACG,GAAG,CAACC,GAAG,KAAK;QAC/BC,IAAI,EAAED,GAAG,CAACE,YAAY,CAAC,MAAM,CAAC;QAC9BC,OAAO,EAAEH,GAAG,CAACE,YAAY,CAAC,SAAS;MACrC,CAAC,CAAC,CAAC;MAEHf,QAAQ,CAACM,IAAI,KAAK;QAChB,GAAGA,IAAI;QACPL,SAAS,EAAE,KAAK;QAChBE,aAAa,EAAEQ;MACjB,CAAC,CAAC,CAAC;MAEH,OAAOF,IAAI;IACb,CAAC,CAAC,OAAOQ,GAAG,EAAE;MACZ,MAAMC,YAAY,GAAGD,GAAG,YAAYE,KAAK,GAAGF,GAAG,CAACG,OAAO,GAAG,8BAA8B;MACxFpB,QAAQ,CAACM,IAAI,KAAK;QAChB,GAAGA,IAAI;QACPL,SAAS,EAAE,KAAK;QAChBC,KAAK,EAAEgB;MACT,CAAC,CAAC,CAAC;MACHG,OAAO,CAACnB,KAAK,CAAC,4BAA4B,EAAEe,GAAG,CAAC;MAChD,OAAO,EAAE;IACX;EACF,CAAC,EAAE,CAACrB,MAAM,CAAC,CAAC;EAEZN,SAAS,CAAC,MAAM;IACd,IAAImB,IAAuB,GAAG,EAAE;IAEhCL,YAAY,CAAC,CAAC,CAACkB,IAAI,CAACC,OAAO,IAAI;MAC7Bd,IAAI,GAAGc,OAAO;IAChB,CAAC,CAAC;IAEF,OAAO,MAAM;MACXd,IAAI,CAACe,OAAO,CAACX,GAAG,IAAIA,GAAG,CAACY,MAAM,CAAC,CAAC,CAAC;MACjC,MAAMC,SAAS,GAAGC,QAAQ,CAACC,aAAa,CAAC,uBAAuB,CAAC;MACjEF,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAED,MAAM,CAAC,CAAC;IACrB,CAAC;EACH,CAAC,EAAE,CAACrB,YAAY,CAAC,CAAC;EAElB,OAAO;IACLN,YAAY;IACZ,GAAGC;EACL,CAAC;AACH,CAAC;AAACF,EAAA,CA7DWF,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}