{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from 'react';\nimport { MetaTagGenerator } from '../utils/MetaTagGenerator';\nexport const useMetaTags = config => {\n  _s();\n  const componentRef = useRef(null);\n  const mountedRef = useRef(false);\n  const [state, setState] = useState({\n    isLoading: true,\n    error: null,\n    tags: []\n  });\n  useEffect(() => {\n    mountedRef.current = true;\n    const tagsToCleanup = [];\n    const generateMetaTags = async () => {\n      if (!componentRef.current || !mountedRef.current) return;\n      try {\n        const newTags = await MetaTagGenerator.generate({\n          ...config,\n          elementRef: componentRef\n        });\n        if (mountedRef.current) {\n          tagsToCleanup.push(...newTags);\n          setState({\n            isLoading: false,\n            error: null,\n            tags: newTags.map(tag => ({\n              name: tag.getAttribute('name') || '',\n              content: tag.getAttribute('content') || ''\n            }))\n          });\n        }\n      } catch (err) {\n        if (mountedRef.current) {\n          setState({\n            isLoading: false,\n            error: err instanceof Error ? err.message : 'Failed to generate meta tags',\n            tags: []\n          });\n        }\n      }\n    };\n    generateMetaTags();\n    return () => {\n      mountedRef.current = false;\n      tagsToCleanup.forEach(tag => tag.remove());\n      const canonical = document.querySelector('link[rel=\"canonical\"]');\n      canonical === null || canonical === void 0 ? void 0 : canonical.remove();\n    };\n  }, [config.title, config.description, config.keywords]); // Only re-run if these specific props change\n\n  return {\n    componentRef,\n    isLoading: state.isLoading,\n    error: state.error,\n    generatedTags: state.tags\n  };\n};\n_s(useMetaTags, \"REfAm9v09kvqsUuUlyp87dRLeBE=\");","map":{"version":3,"names":["useEffect","useRef","useState","MetaTagGenerator","useMetaTags","config","_s","componentRef","mountedRef","state","setState","isLoading","error","tags","current","tagsToCleanup","generateMetaTags","newTags","generate","elementRef","push","map","tag","name","getAttribute","content","err","Error","message","forEach","remove","canonical","document","querySelector","title","description","keywords","generatedTags"],"sources":["C:/Users/hamro/Documents/work/meta/src/hooks/useMetaTags.ts"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\r\nimport { MetaConfig, MetaTagGenerator } from '../utils/MetaTagGenerator';\r\n\r\ninterface MetaTagState {\r\n  isLoading: boolean;\r\n  error: string | null;\r\n  tags: Array<{ name: string; content: string }>;\r\n}\r\n\r\nexport const useMetaTags = (config: MetaConfig) => {\r\n  const componentRef = useRef<HTMLDivElement>(null);\r\n  const mountedRef = useRef(false);\r\n  const [state, setState] = useState<MetaTagState>({\r\n    isLoading: true,\r\n    error: null,\r\n    tags: []\r\n  });\r\n\r\n  useEffect(() => {\r\n    mountedRef.current = true;\r\n    \r\n    const tagsToCleanup: HTMLMetaElement[] = [];\r\n    \r\n    const generateMetaTags = async () => {\r\n      if (!componentRef.current || !mountedRef.current) return;\r\n      \r\n      try {\r\n        const newTags = await MetaTagGenerator.generate({\r\n          ...config,\r\n          elementRef: componentRef\r\n        });\r\n        \r\n        if (mountedRef.current) {\r\n          tagsToCleanup.push(...newTags);\r\n          setState({\r\n            isLoading: false,\r\n            error: null,\r\n            tags: newTags.map(tag => ({\r\n              name: tag.getAttribute('name') || '',\r\n              content: tag.getAttribute('content') || ''\r\n            }))\r\n          });\r\n        }\r\n      } catch (err) {\r\n        if (mountedRef.current) {\r\n          setState({\r\n            isLoading: false,\r\n            error: err instanceof Error ? err.message : 'Failed to generate meta tags',\r\n            tags: []\r\n          });\r\n        }\r\n      }\r\n    };\r\n\r\n    generateMetaTags();\r\n\r\n    return () => {\r\n      mountedRef.current = false;\r\n      tagsToCleanup.forEach(tag => tag.remove());\r\n      const canonical = document.querySelector('link[rel=\"canonical\"]');\r\n      canonical?.remove();\r\n    };\r\n  }, [config.title, config.description, config.keywords]); // Only re-run if these specific props change\r\n\r\n  return {\r\n    componentRef,\r\n    isLoading: state.isLoading,\r\n    error: state.error,\r\n    generatedTags: state.tags\r\n  };\r\n};\r\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACnD,SAAqBC,gBAAgB,QAAQ,2BAA2B;AAQxE,OAAO,MAAMC,WAAW,GAAIC,MAAkB,IAAK;EAAAC,EAAA;EACjD,MAAMC,YAAY,GAAGN,MAAM,CAAiB,IAAI,CAAC;EACjD,MAAMO,UAAU,GAAGP,MAAM,CAAC,KAAK,CAAC;EAChC,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAe;IAC/CS,SAAS,EAAE,IAAI;IACfC,KAAK,EAAE,IAAI;IACXC,IAAI,EAAE;EACR,CAAC,CAAC;EAEFb,SAAS,CAAC,MAAM;IACdQ,UAAU,CAACM,OAAO,GAAG,IAAI;IAEzB,MAAMC,aAAgC,GAAG,EAAE;IAE3C,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnC,IAAI,CAACT,YAAY,CAACO,OAAO,IAAI,CAACN,UAAU,CAACM,OAAO,EAAE;MAElD,IAAI;QACF,MAAMG,OAAO,GAAG,MAAMd,gBAAgB,CAACe,QAAQ,CAAC;UAC9C,GAAGb,MAAM;UACTc,UAAU,EAAEZ;QACd,CAAC,CAAC;QAEF,IAAIC,UAAU,CAACM,OAAO,EAAE;UACtBC,aAAa,CAACK,IAAI,CAAC,GAAGH,OAAO,CAAC;UAC9BP,QAAQ,CAAC;YACPC,SAAS,EAAE,KAAK;YAChBC,KAAK,EAAE,IAAI;YACXC,IAAI,EAAEI,OAAO,CAACI,GAAG,CAACC,GAAG,KAAK;cACxBC,IAAI,EAAED,GAAG,CAACE,YAAY,CAAC,MAAM,CAAC,IAAI,EAAE;cACpCC,OAAO,EAAEH,GAAG,CAACE,YAAY,CAAC,SAAS,CAAC,IAAI;YAC1C,CAAC,CAAC;UACJ,CAAC,CAAC;QACJ;MACF,CAAC,CAAC,OAAOE,GAAG,EAAE;QACZ,IAAIlB,UAAU,CAACM,OAAO,EAAE;UACtBJ,QAAQ,CAAC;YACPC,SAAS,EAAE,KAAK;YAChBC,KAAK,EAAEc,GAAG,YAAYC,KAAK,GAAGD,GAAG,CAACE,OAAO,GAAG,8BAA8B;YAC1Ef,IAAI,EAAE;UACR,CAAC,CAAC;QACJ;MACF;IACF,CAAC;IAEDG,gBAAgB,CAAC,CAAC;IAElB,OAAO,MAAM;MACXR,UAAU,CAACM,OAAO,GAAG,KAAK;MAC1BC,aAAa,CAACc,OAAO,CAACP,GAAG,IAAIA,GAAG,CAACQ,MAAM,CAAC,CAAC,CAAC;MAC1C,MAAMC,SAAS,GAAGC,QAAQ,CAACC,aAAa,CAAC,uBAAuB,CAAC;MACjEF,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAED,MAAM,CAAC,CAAC;IACrB,CAAC;EACH,CAAC,EAAE,CAACzB,MAAM,CAAC6B,KAAK,EAAE7B,MAAM,CAAC8B,WAAW,EAAE9B,MAAM,CAAC+B,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEzD,OAAO;IACL7B,YAAY;IACZI,SAAS,EAAEF,KAAK,CAACE,SAAS;IAC1BC,KAAK,EAAEH,KAAK,CAACG,KAAK;IAClByB,aAAa,EAAE5B,KAAK,CAACI;EACvB,CAAC;AACH,CAAC;AAACP,EAAA,CA7DWF,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}